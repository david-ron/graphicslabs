#version 330 core

// Input vertex data, different for all executions of this shader.
layout(location = 0) in vec3 vertexPosition_modelspace;
layout(location = 1) in vec3 vertexNormal_modelspace;  // You will need this when you do lighting
layout(location = 2) in vec3 vertexColor; 

// output to Fragment Shader
out vec3 v_color;

// Uniform
// Values that stay constant for the whole mesh.
uniform mat4 WorldTransform;
uniform mat4 ViewTransform;
uniform mat4 ProjectonTransform;


// Light and Material Uniform Variables
uniform vec4 WorldLightPosition; // if w = 1: Point light, if w = 0: directional light
uniform vec4 materialCoefficients; // x: ambient   y: diffuse   z: specular   w: specular exponent

uniform vec3 lightColor;
uniform vec3 lightAttenuation; // x: kC  y: kL  z: kQ

void main()
{
	mat4 MV = ViewTransform * WorldTransform;
	mat4 MVP = ProjectonTransform * MV;

	// Output position of the vertex, in clip space : MVP * position
	gl_Position =  MVP * vec4(vertexPosition_modelspace,1);
	v_color = vertexColor;


	// Implement Gouraud shading here...
	// ...

    // Isolate for now
    float dir = WorldLightPosition.w;
    // Probably need this for the light?
    vec3 Position_worldspace = (WorldTransform * vec4(vertexPosition_modelspace, 1)).xyz;

    vec3 vertexPosition_cameraspace = ( MV * vec4(vertexPosition_modelspace,1)).xyz;
    vec3 eyeVector = vec3(0,0,0) - vertexPosition_cameraspace;
    vec3 LightPosition_cameraspace = ( ViewTransform * WorldLightPosition).xyz;
    vec4 lightVector = vec4(LightPosition_cameraspace + eyeVector, dir);
    vec3 normal = ( MV * vec4(vertexNormal_modelspace,0)).xyz;
    mat4 Winvt = transpose(inverse(WorldTransform));
    normal = (ViewTransform * Winvt * vec4(vertexNormal_modelspace,0)).xyz;
    // normalize stuff
    vec3 norm = normalize(normal);
    vec3 eye_vector = normalize(eyeVector);
    // maintain 4th element incase
    vec4 light_vector = vec4(normalize(lightVector.xyz),lightVector.w);
    // distance
    float distance = length(light_vector.xyz);
    // Ambient
    vec3 ambient = materialCoefficients.x * lightColor;


    float cosTheta = clamp( dot( norm, light_vector.xyz ), 0,1 );
    //color = v_color* lightColor *cosTheta;
    vec3 reflection = reflect(-light_vector.xyz, norm);

    float cosPhi = clamp( dot( eye_vector, reflection ), 0,1 );

    // Diffuse
    vec3 diffuse = materialCoefficients.y * cosTheta * lightColor;

    // Specular
    float spec = pow(max(cosPhi, 0.0), materialCoefficients.w);
    vec3 specular = materialCoefficients.z * spec * lightColor;

    float attenuation = 1.0f / (lightAttenuation.x + lightAttenuation.y * distance + lightAttenuation.z * (distance * distance));
//    ambient  *= attenuation;
    diffuse  *= attenuation;
    specular *= attenuation;
    v_color = (ambient  + diffuse +specular ) * vertexColor;


}
